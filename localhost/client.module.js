
import {
    f_add_css,
    f_s_css_prefixed,
    o_variables, 
    f_s_css_from_o_variables
} from "https://deno.land/x/f_add_css@1.1/mod.js"

import {
    f_o_html__and_make_renderable,
}
from 'https://deno.land/x/f_o_html_from_o_js@2.9/mod.js'

import {
    f_n_idx_binding_from_params,
    f_o_gpu_gateway, 
    f_o_gpu_gateway__from_simple_fragment_shader,
    f_o_gpu_gateway_webgpu,
    f_o_gpu_gateway_webgpu_dataitem__buffer_from_v_as_type,
    f_o_gpu_texture__from_o_web_api_object,
    f_render_o_gpu_gateway,
    f_render_o_gpu_gateway_webgpu,
    f_s_autogenerated_accessor_functions,
    f_s_binding_declaration__from_o_gpu_gateway_webgpu,
    f_update_data_in_o_gpu_gateway,
    f_update_data_in_o_gpu_gateway_webgpu,
}
from 'https://deno.land/x/gpugateway@0.3/mod.js'

o_variables.n_rem_font_size_base = 1. // adjust font size, other variables can also be adapted before adding the css to the dom
o_variables.n_rem_padding_interactive_elements = 0.5; // adjust padding for interactive elements 
f_add_css(
    `
    body{
        min-height: 100vh;
        min-width: 100vw;
        /* background: rgba(0,0,0,0.84);*/
        display:flex;
        justify-content:center;
    }
    canvas{
        width: 100%;
        height: 100%;
        position:fixed;
        z-index:-1;
    }
    .app{
        max-width: 1000px;
        width:100%;
        height: 100vh;
        display:flex;
        flex-direction: column;
        justify-content:flex-end;
    }
    ${
        f_s_css_from_o_variables(
            o_variables
        )
    }
    `

);


let  f_update_tab_favicon = function(s_url) {
    var link = document.createElement('link');
    var oldLink = document.querySelector('link[rel="icon"]');
    link.rel = 'icon';
    link.href = s_url;
    if (oldLink) {
        document.head.removeChild(oldLink);
    }
    document.head.appendChild(link);
}

let o_canvas = document.createElement('canvas');
o_canvas.width = window.innerWidth
o_canvas.height = window.innerHeight
document.body.appendChild(o_canvas);
let o_ctx = o_canvas.getContext("2d");



let f_resize = ()=>{
    o_canvas.width = window.innerWidth
    o_canvas.height = window.innerHeight

}
window.addEventListener('resize',()=>{
    f_resize();
    f_render_canvas();
});
f_resize()

let n_id_raf = 0;
class O_line{
    constructor(
        s_text, 
        a_v_o_char_img, 
        n_scl_x_char_max, 
    ){
        this.s_text = s_text
        this.a_v_o_char_img = a_v_o_char_img
        this.n_scl_x_char_max = n_scl_x_char_max
    }
}
let a_o_line = [];
let f_render_canvas = function(){
    o_ctx.clearRect(0, 0, o_canvas.width, o_canvas.height);
    
    let a_o_line = o_state.s_text.split('\n').map(s_line=>{

        let a_s_char = s_line.split("")
        let n_scl_x_char_max = o_canvas.width / (a_s_char.length);
        let a_v_o_char_img = a_s_char.map(s_char=>{

            let a_o = o_state.o_s_char_a_o_img[s_char];
            let a_o_lower = o_state.o_s_char_a_o_img[s_char.toLowerCase()];
            let a_o_upper = o_state.o_s_char_a_o_img[s_char.toUpperCase()];
            a_o = (a_o) 
                ? a_o 
                : (a_o_lower) 
                ? a_o_lower
                : (a_o_upper)
                ? a_o_upper 
                : []
    
    
            let n_len = a_o.length;
            let o = a_o?.[parseInt(Math.random()*n_len)];
            return o
            // let n_width = n_scl_x_char_max;
    
            // if(s == '\n'){
            //     n_trn_y += n_scl_y_max;
            // }
            // if(o){
            //     if(o.o_img.height > n_scl_y_max){
            //         n_scl_y_max = o.o_img.height;
            //     }
            //     o_ctx.drawImage(o.o_img, n_x, n_trn_y, n_scl_x_char, n_scl_x_char*(o.o_img.height/o.o_img.width));
            // }
            // n_x += n_width;

        });
        return new O_line(
            s_line, 
            a_v_o_char_img,
            n_scl_x_char_max
        )
    });
    let n_scl_y_char_max = o_canvas.height / (a_o_line.length);
    let n_trn_y = 0;
    let n_trn_x_max_char = 0;
    let a_o_char_on_canvas = []
    for(let o_line of a_o_line){
        let n_trn_x = 0;
        let n_scl_x = o_line.n_scl_x_char_max;
        for(let v_o_char_img of o_line.a_v_o_char_img){
            if(v_o_char_img){
                // console.log(v_o_char_img)
                let n_scl_x1 = o_line.n_scl_x_char_max;
                let n_scl_y1 = o_line.n_scl_x_char_max*(v_o_char_img.o_img.height/v_o_char_img.o_img.width);

                let n_scl_x2 = n_scl_y_char_max*(v_o_char_img.o_img.width/v_o_char_img.o_img.height);
                let n_scl_y2 = n_scl_y_char_max;

                n_scl_x = n_scl_x1; 
                let n_scl_y = n_scl_y1;
                if(n_scl_x2 < n_scl_x1){
                    n_scl_x = n_scl_x2; 
                    n_scl_y = n_scl_y2;   
                } 

                a_o_char_on_canvas.push(
                    new O_char_on_canvas(
                        v_o_char_img, 
                        n_trn_x,
                        n_trn_y,
                        n_scl_x,
                        n_scl_y
                    )
                )
                let n_x_tmp = n_trn_x+n_scl_x;
                if(n_x_tmp > n_trn_x_max_char){
                    n_trn_x_max_char = n_x_tmp; 
                }
                // console.log(o_line)
            }
            n_trn_x +=n_scl_x;
        }

        n_trn_y += n_scl_y_char_max;
    }

    let n_trn_x = (o_canvas.width - n_trn_x_max_char)/2;

    for(let o_char_on_canvas of a_o_char_on_canvas){
        // console.log(o_char_on_canvas)
        o_ctx.drawImage(
            o_char_on_canvas.o_char_img.o_img, 
            n_trn_x+o_char_on_canvas.n_trn_x,
            o_char_on_canvas.n_trn_y,
            o_char_on_canvas.n_scl_x,
            o_char_on_canvas.n_scl_y
        );
    }
    // console.log(a_o_line)

    f_update_tab_favicon(a_o_char_on_canvas?.[0].o_char_img.o_img.src)
    // let n_scl_x_max = 

    // let n_trn_x = 0;
    // let n_scl_y_max = 0;
    // let n_trn_y = 0;
    // let a_o_img = 
}

let f_raf = function(){ 
    // f_render_canvas();
    n_id_raf = window.requestAnimationFrame(f_raf);

}
n_id_raf = window.requestAnimationFrame(f_raf);


class O_char_img{
    constructor(
        s_char, 
        o_img, 
    ){
        this.s_char = s_char;
        this.o_img = o_img 
    }
}
class O_char_on_canvas{
    constructor(
        o_char_img, 
        n_trn_x,
        n_trn_y,
        n_scl_x,
        n_scl_y,
        ){
        
        this.o_char_img = o_char_img
        this.n_trn_x = n_trn_x
        this.n_trn_y = n_trn_y
        this.n_scl_x = n_scl_x
        this.n_scl_y = n_scl_y

    }
}

let o_state = {
    s_text : [
        `look`, 
        `down`, 
        `and`,
        `type`,
    ].join('\n'),
    s_char: '', 
    o_s_char_a_o_img: {},
    a_o_char_img: []
}
window.o_state = o_state
let n = 0; 
let o = await fetch("/a_s_name_file.json");
let a_o = await o.json();
// console.log(a_o)
let f_o_img = async function(
    s_url
){
    return new Promise((f_res)=>{
        let o_img = new Image();
        o_img.onload = ()=>{
            return f_res(o_img)
        }
        o_img.src = s_url;
    })
}
await Promise.all(
    a_o.map(o=>{
        let s_char = o.name[0];

        return f_o_img(`/static/${encodeURIComponent(`${o.name}`)}`).then(o_img=>{
            let o_char_img = new O_char_img(
                s_char,
                o_img
            );
            let a_o = o_state.o_s_char_a_o_img[s_char];
            if(!a_o){
                o_state.o_s_char_a_o_img[s_char] = []
                a_o = o_state.o_s_char_a_o_img[s_char]
            }
            a_o.push(o_char_img)
            o_state.a_o_char_img.push(o_char_img)
        })
    })
)
// for(let o of a_o){
//     let o_img = new Image();
//     let s_char = o.name[0];

//     o_img.onload = function(){
//         let o_char_img = new O_char_img(
//             s_char,
//             o_img
//         );
//         let a_o = o_state.o_s_char_a_o_img[s_char];
//         if(!a_o){
//             o_state.o_s_char_a_o_img[s_char] = []
//             a_o = o_state.o_s_char_a_o_img[s_char]
//         }
//         a_o.push(o_char_img)
//         o_state.a_o_char_img.push(o_char_img)
//     }
//     o_img.src = `/static/${encodeURIComponent(`${o.name}`)}`
// }

// //readme.md:start
document.body.appendChild(
    await f_o_html__and_make_renderable(
        {
            s_tag: 'div', 
            class: "app",
            a_o: [
                Object.assign(
                    o_state, 
                    {
                        o_js__s_text: {
                            f_o_jsh: ()=>{
                                return {
                                    s_tag: "textarea", 
                                    oninput: (o_e)=>{
                                        o_state.s_text = o_e.target.value;
                                        f_render_canvas();
                                    }, 
                                    value: o_state.s_text
                                }
                            }
                        }
                    }
                ).o_js__s_text,
            ]
        }
    )
);
f_render_canvas();
// //readme.md:end