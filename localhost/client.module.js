
import {
    f_add_css,
    f_s_css_prefixed,
    o_variables, 
    f_s_css_from_o_variables
} from "https://deno.land/x/f_add_css@1.1/mod.js"

import {
    f_o_html__and_make_renderable,
}
from 'https://deno.land/x/f_o_html_from_o_js@2.9/mod.js'

import {
    f_n_idx_binding_from_params,
    f_o_gpu_gateway, 
    f_o_gpu_gateway__from_simple_fragment_shader,
    f_o_gpu_gateway_webgpu,
    f_o_gpu_gateway_webgpu_dataitem__buffer_from_v_as_type,
    f_o_gpu_texture__from_o_web_api_object,
    f_render_o_gpu_gateway,
    f_render_o_gpu_gateway_webgpu,
    f_s_autogenerated_accessor_functions,
    f_s_binding_declaration__from_o_gpu_gateway_webgpu,
    f_update_data_in_o_gpu_gateway,
    f_update_data_in_o_gpu_gateway_webgpu,
}
from 'https://deno.land/x/gpugateway@0.3/mod.js'

o_variables.n_rem_font_size_base = 1. // adjust font size, other variables can also be adapted before adding the css to the dom
o_variables.n_rem_padding_interactive_elements = 0.5; // adjust padding for interactive elements 
f_add_css(
    `
    body{
        min-height: 100vh;
        min-width: 100vw;
        /* background: rgba(0,0,0,0.84);*/
        display:flex;
        justify-content:center;
    }
    canvas{
        width: 100%;
        height: 100%;
        position:absolute;
        top: 0;
        left: 0;
    }
    .app{
        width:100vw;
        height:100vh;
        display: flex;
        align-items: center;
        justify-content: end;
    }
    .inputs{
        max-width: 1000px;
        align-self:end;
        z-index:1;        
    }
    ${
        f_s_css_from_o_variables(
            o_variables
        )
    }
    `

);


let  f_update_tab_favicon = function(s_url) {
    var link = document.createElement('link');
    var oldLink = document.querySelector('link[rel="icon"]');
    link.rel = 'icon';
    link.href = s_url;
    if (oldLink) {
        document.head.removeChild(oldLink);
    }
    document.head.appendChild(link);
}

let o_canvas = document.createElement('canvas');
o_canvas.width = window.innerWidth
o_canvas.height = window.innerHeight
let o_ctx = o_canvas.getContext("2d");



let f_resize = ()=>{
    o_canvas.width = window.innerWidth
    o_canvas.height = window.innerHeight

}
window.addEventListener('resize',()=>{
    f_resize();
    f_render_canvas();
});
f_resize()

let n_id_raf = 0;
class O_line{
    constructor(
        s_text, 
        a_v_o_char_img, 
        n_scl_x_char_max, 
    ){
        this.s_text = s_text
        this.a_v_o_char_img = a_v_o_char_img
        this.n_scl_x_char_max = n_scl_x_char_max
    }
}
let a_o_line = [];
let s_text_last = '';
let f_render_canvas = function(){
    o_ctx.clearRect(0, 0, o_canvas.width, o_canvas.height);

    // if(o_state.s_text == s_text_last){
    //     return
    // }

    let a_o_line = o_state.s_text.split('\n').map(s_line=>{

        let a_s_char = s_line.split("")
        let n_scl_x_char_max = o_canvas.width / (a_s_char.length);
        let a_v_o_char_img = a_s_char.map(s_char=>{

            let a_o = o_state.o_s_char_a_o_img[s_char];
            let a_o_lower = o_state.o_s_char_a_o_img[s_char.toLowerCase()];
            let a_o_upper = o_state.o_s_char_a_o_img[s_char.toUpperCase()];
            a_o = (a_o) 
                ? a_o 
                : (a_o_lower) 
                ? a_o_lower
                : (a_o_upper)
                ? a_o_upper 
                : []
    
    
            let n_len = a_o.length;
            let o = a_o?.[parseInt(Math.random()*n_len)];
            return o
            // let n_width = n_scl_x_char_max;
    
            // if(s == '\n'){
            //     n_trn_y += n_scl_y_max;
            // }
            // if(o){
            //     if(o.o_img.height > n_scl_y_max){
            //         n_scl_y_max = o.o_img.height;
            //     }
            //     o_ctx.drawImage(o.o_img, n_x, n_trn_y, n_scl_x_char, n_scl_x_char*(o.o_img.height/o.o_img.width));
            // }
            // n_x += n_width;

        });
        return new O_line(
            s_line, 
            a_v_o_char_img,
            n_scl_x_char_max
        )
    });
    let n_scl_y_char_max = o_canvas.height / (a_o_line.length);
    let n_trn_y = 0;
    
    if(o_state.s_text != s_text_last){

        o_state.a_a_o_char_on_canvas = []
        for(let o_line of a_o_line){
            let n_trn_x = 0;
            let n_scl_x = o_line.n_scl_x_char_max;
            o_state.a_a_o_char_on_canvas.push([])
            for(let v_o_char_img of o_line.a_v_o_char_img){
                if(v_o_char_img){
                    // console.log(v_o_char_img)
                    let n_scl_x1 = o_line.n_scl_x_char_max;
                    let n_scl_y1 = o_line.n_scl_x_char_max*(v_o_char_img.o_img.height/v_o_char_img.o_img.width);
    
                    let n_scl_x2 = n_scl_y_char_max*(v_o_char_img.o_img.width/v_o_char_img.o_img.height);
                    let n_scl_y2 = n_scl_y_char_max;
    
                    n_scl_x = n_scl_x1; 
                    let n_scl_y = n_scl_y1;
                    if(n_scl_x2 < n_scl_x1){
                        n_scl_x = n_scl_x2; 
                        n_scl_y = n_scl_y2;   
                    } 
    
                    o_state.a_a_o_char_on_canvas.at(-1).push(
                        new O_char_on_canvas(
                            v_o_char_img, 
                            n_trn_x,
                            n_trn_y,
                            n_scl_x,
                            n_scl_y
                        )
                    )
                    let n_x_tmp = n_trn_x+n_scl_x;
                    if(n_x_tmp > o_state.n_trn_x_max_char){
                        o_state.n_trn_x_max_char = n_x_tmp; 
                    }
                    // console.log(o_line)
                }
                n_trn_x +=n_scl_x;
            }
    
            n_trn_y += n_scl_y_char_max;
        }
        f_update_tab_favicon(o_state.a_a_o_char_on_canvas?.[0]?.[0]?.o_char_img?.o_img?.src)

    }

    let n_trn_x_center = (o_canvas.width - o_state.n_trn_x_max_char)/2;
    for(let a_o_char_on_canvas of o_state.a_a_o_char_on_canvas  ){
        for(let o_char_on_canvas of a_o_char_on_canvas){
            let n_factor = (Math.random()-.5)*.2
            let n_radians = (Math.PI*2)*(Math.random()-.5)*0.05;
            console.log(n_trn_x_center)
            let n_trn_x = n_trn_x_center+o_char_on_canvas.n_trn_x;
            let n_trn_y = o_char_on_canvas.n_trn_y
            let n_scl_x = o_char_on_canvas.n_scl_x*(1+n_factor)
            let n_scl_y = o_char_on_canvas.n_scl_y*(1+n_factor)
            // o_ctx.drawImage(
            //     o_char_on_canvas.o_char_img.o_img, 
            //     n_trn_x, 
            //     n_trn_y, 
            //     n_scl_x,
            //     n_scl_y
            // );
            o_ctx.save();
            o_ctx.translate(
                n_trn_x+(n_scl_x/2),
                n_trn_y+(n_scl_y/2)
            );
            o_ctx.rotate(n_radians);
            o_ctx.drawImage(
                o_char_on_canvas.o_char_img.o_img, 
                -n_scl_x/2,
                -n_scl_y/2,
                n_scl_x,
                n_scl_y
            );
            // o_ctx.translate(
            //     -n_trn_x-(o_canvas.width*10),
            //     -n_trn_y
            // );
            o_ctx.restore();
        }
    }
    // console.log(a_o_line)

    // let n_scl_x_max = 

    // let n_trn_x = 0;
    // let n_scl_y_max = 0;
    // let n_trn_y = 0;
    // let a_o_img = 
    s_text_last = o_state.s_text
}



class O_char_img{
    constructor(
        s_char, 
        o_img, 
    ){
        this.s_char = s_char;
        this.o_img = o_img 
    }
}
class O_char_on_canvas{
    constructor(
        o_char_img, 
        n_trn_x,
        n_trn_y,
        n_scl_x,
        n_scl_y,
        ){
        
        this.o_char_img = o_char_img
        this.n_trn_x = n_trn_x
        this.n_trn_y = n_trn_y
        this.n_scl_x = n_scl_x
        this.n_scl_y = n_scl_y

    }
}
let a_s_text_alignment_x_axis = [
    'left', 
    'center', 
    'right'
];
let o_state = {
    n_trn_x_max_char: 0,
    a_a_o_char_on_canvas: [],
    a_s_text_alignment_x_axis,
    s_text_alignment_x_axis : a_s_text_alignment_x_axis[0],
    n_fps: 10,
    b_animate: false,
    s_text : [
        `look`, 
        `down`, 
        `and`,
        `type`,
    ].join('\n'),
    s_char: '', 
    o_s_char_a_o_img: {},
    a_o_char_img: []
}
window.o_state = o_state


let n_wpn = 0;
let n_wpn_absdiff_max =  1000 / o_state.n_fps;
let f_raf = function(){ 
    let n_wpn_absdiff = Math.abs(n_wpn - window.performance.now());
    if(n_wpn_absdiff > n_wpn_absdiff_max){
        if(o_state.b_animate){
            f_render_canvas();
        }
        n_wpn = window.performance.now();
    }
    n_id_raf = window.requestAnimationFrame(f_raf);
}
n_id_raf = window.requestAnimationFrame(f_raf);

let n = 0; 
let o = await fetch("/a_s_name_file.json");
let a_o = await o.json();
// console.log(a_o)
let f_o_img = async function(
    s_url
){
    return new Promise((f_res)=>{
        let o_img = new Image();
        o_img.onload = ()=>{
            return f_res(o_img)
        }
        o_img.src = s_url;
    })
}
await Promise.all(
    a_o.map(o=>{
        let s_char = o.name[0];

        return f_o_img(`/static/${encodeURIComponent(`${o.name}`)}`).then(o_img=>{
            let o_char_img = new O_char_img(
                s_char,
                o_img
            );
            let a_o = o_state.o_s_char_a_o_img[s_char];
            if(!a_o){
                o_state.o_s_char_a_o_img[s_char] = []
                a_o = o_state.o_s_char_a_o_img[s_char]
            }
            a_o.push(o_char_img)
            o_state.a_o_char_img.push(o_char_img)
        })
    })
)
// for(let o of a_o){
//     let o_img = new Image();
//     let s_char = o.name[0];

//     o_img.onload = function(){
//         let o_char_img = new O_char_img(
//             s_char,
//             o_img
//         );
//         let a_o = o_state.o_s_char_a_o_img[s_char];
//         if(!a_o){
//             o_state.o_s_char_a_o_img[s_char] = []
//             a_o = o_state.o_s_char_a_o_img[s_char]
//         }
//         a_o.push(o_char_img)
//         o_state.a_o_char_img.push(o_char_img)
//     }
//     o_img.src = `/static/${encodeURIComponent(`${o.name}`)}`
// }

// //readme.md:start
document.body.appendChild(
    await f_o_html__and_make_renderable(
        {
            s_tag: 'div', 
            class: "app",
            a_o: [
                {
                    id: "canvas",
                    s_tag: "canvas"
                },
                {
                    class: "inputs hoverable clickable", 
                    a_o: [
                        {
                            s_tag: "button", 
                            innerText: "Download .png", 
                            onpointerdown: ()=>{
                                const o_el_link = document.createElement('a');
                                o_el_link.href = o_canvas.toDataURL('image/png');
                                o_el_link.download = `ransom_renderer_deno_dev_${o_state.s_text.split(" ").slice(0,12).join('_')}.png`;
                                o_el_link.click();
                            }
                        },
                        Object.assign(
                            o_state, 
                            {
                                o_js__animate: {
                                    f_o_jsh:()=>{
                                        return {
                                            style: [
                                                "display:flex",
                                                'align-items: center',
                                                // 'justify-content: center',
                                            ].join(';'),
                                            a_o: [
                                            
                                                {
                                                    innerText: "animate", 
                                                },
                                                {
                                                    s_tag: "button", 
                                                    innerText: (o_state.b_animate) ? '[x]' : '[]', 
                                                    onpointerdown: async ()=>{
                                                        o_state.b_animate = !o_state.b_animate
                                                        await o_state?.o_js__animate?._f_render();
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        ).o_js__animate,
                        Object.assign(
                            o_state, 
                            {
                                o_js__s_text_alignment_x_axis: {
                                    f_o_jsh:()=>{
                                        return {
                                            style: [
                                                "display:flex",
                                                'align-items: center',
                                                // 'justify-content: center',
                                            ].join(';'),
                                            a_o: [
                                            
                                                {
                                                    innerText: "s_text_alignment_x_axis", 
                                                },
                                                {
                                                    s_tag: "select",
                                                    a_o: [
                                                        ...o_state.a_s_text_alignment_x_axis.map(s=>{
                                                            return {
                                                                s_tag: "option", 
                                                                innerText: s,
                                                                value: s, 
                                                                ...((
                                                                    o_state.s_text_alignment_x_axis == s
                                                                ) ?{selected: true} :{}),
                                                                onpointerdown: (o_e)=>{
                                                                    o_state.s_text_alignment_x_axis = o_e.target.value
                                                                    f_render_canvas();
                                                                }
                                                            }
                                                        })
                                                    ],
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        ).o_js__s_text_alignment_x_axis,
                        Object.assign(
                            o_state, 
                            {
                                o_js__s_text: {
                                    f_o_jsh: ()=>{
                                        return {
                                            s_tag: "textarea", 
                                            rows: 10,
                                            oninput: (o_e)=>{
                                                o_state.s_text = o_e.target.value;
                                                f_render_canvas();
                                            }, 
                                            value: o_state.s_text
                                        }
                                    }
                                }
                            }
                        ).o_js__s_text,
                    ]
                }    
            ]
        }
    )
);
o_canvas = document.querySelector("#canvas");
o_ctx = o_canvas.getContext("2d")
f_resize();

f_render_canvas();
// //readme.md:end