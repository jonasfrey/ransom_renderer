
import {
    f_add_css,
    f_s_css_prefixed,
    o_variables, 
    f_s_css_from_o_variables
} from "https://deno.land/x/f_add_css@1.1/mod.js"

import {
    f_o_html__and_make_renderable,
}
from 'https://deno.land/x/f_o_html_from_o_js@2.9/mod.js'

import {
    f_n_idx_binding_from_params,
    f_o_gpu_gateway, 
    f_o_gpu_gateway__from_simple_fragment_shader,
    f_o_gpu_gateway_webgpu,
    f_o_gpu_gateway_webgpu_dataitem__buffer_from_v_as_type,
    f_o_gpu_texture__from_o_web_api_object,
    f_render_o_gpu_gateway,
    f_render_o_gpu_gateway_webgpu,
    f_s_autogenerated_accessor_functions,
    f_s_binding_declaration__from_o_gpu_gateway_webgpu,
    f_update_data_in_o_gpu_gateway,
    f_update_data_in_o_gpu_gateway_webgpu,
}
from 'https://deno.land/x/gpugateway@0.3/mod.js'

o_variables.n_rem_font_size_base = 1. // adjust font size, other variables can also be adapted before adding the css to the dom
o_variables.n_rem_padding_interactive_elements = 0.5; // adjust padding for interactive elements 
f_add_css(
    `
    body{
        min-height: 100vh;
        min-width: 100vw;
        /* background: rgba(0,0,0,0.84);*/
        display:flex;
        justify-content:center;
    }
    canvas{
        width: 100%;
        height: 100%;
        position:fixed;
        z-index:-1;
    }
    .app{
        max-width: 1000px;
        width:100%;
        height: 100vh;
        display:flex;
        flex-direction: column;
        justify-content:flex-end;
    }
    ${
        f_s_css_from_o_variables(
            o_variables
        )
    }
    `

);


let o_canvas = document.createElement('canvas');
o_canvas.width = window.innerWidth
o_canvas.height = window.innerHeight
document.body.appendChild(o_canvas);
let o_ctx = o_canvas.getContext("2d");



let f_resize = ()=>{
    o_canvas.width = window.innerWidth
    o_canvas.height = window.innerHeight

}
window.addEventListener('resize',()=>{
    f_resize()
});
f_resize()

let n_id_raf = 0;
let f_render_canvas = function(){
    o_ctx.clearRect(0, 0, o_canvas.width, o_canvas.height);
    let n_x = 0;
    let n_scl_x_char = o_canvas.width / (o_state.s_text.split("").length);
    console.log(n_scl_x_char)
    let a_o_img = o_state.s_text.split("").map(s=>{
        let a_o = o_state.o_s_char_a_o_img[s];
        let a_o_lower = o_state.o_s_char_a_o_img[s.toLowerCase()];
        let a_o_upper = o_state.o_s_char_a_o_img[s.toUpperCase()];
        a_o = (a_o) 
            ? a_o 
            : (a_o_lower) 
            ? a_o_lower
            : (a_o_upper)
            ? a_o_upper 
            : []

        let n_len = a_o.length;
        let o = a_o?.[parseInt(Math.random()*n_len)];
        let n_width = n_scl_x_char;
        if(o){
            o_ctx.drawImage(o.o_img, n_x, 0, n_scl_x_char, n_scl_x_char*(o.o_img.height/o.o_img.width));
        }
        n_x += n_width;
    });
}

let f_raf = function(){ 
    // f_render_canvas();
    n_id_raf = window.requestAnimationFrame(f_raf);

}
n_id_raf = window.requestAnimationFrame(f_raf);


class O_char_img{
    constructor(
        s_char, 
        o_img
    ){
        this.s_char = s_char;
        this.o_img = o_img
    }
}

let o_state = {
    s_char: '', 
    o_s_char_a_o_img: {},
    a_o_char_img: []
}
window.o_state = o_state
let n = 0; 
let o = await fetch("/a_s_name_file.json");
let a_o = await o.json();
console.log(a_o)
for(let o of a_o){
    let o_img = new Image();
    let s_char = o.name[0];

    o_img.onload = function(){
        let o_char_img = new O_char_img(
            s_char,
            o_img
        );
        let a_o = o_state.o_s_char_a_o_img[s_char];
        if(!a_o){
            o_state.o_s_char_a_o_img[s_char] = []
            a_o = o_state.o_s_char_a_o_img[s_char]
        }
        a_o.push(o_char_img)
        o_state.a_o_char_img.push(o_char_img)
    }
    o_img.src = `/static/${encodeURIComponent(`${o.name}`)}`
}

// //readme.md:start
document.body.appendChild(
    await f_o_html__and_make_renderable(
        {
            s_tag: 'div', 
            class: "app",
            a_o: [
                Object.assign(
                    o_state, 
                    {
                        o_js__s_text: {
                            f_o_jsh: ()=>{
                                return {
                                    s_tag: "textarea", 
                                    oninput: (o_e)=>{
                                        o_state.s_text = o_e.target.value;
                                        f_render_canvas();
                                    }
                                }
                            }
                        }
                    }
                ).o_js__s_text,
            ]
        }
    )
);
// //readme.md:end